"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Represents an employee. A User can log in to the Qminder Dashboard, manage (create/edit/call)
 * visitors, and potentially more if they have additional rights.
 *
 * Employees can have a profile picture, which will be scaled to potentially multiple sizes.
 * The 'medium' picture size is 200x200.
 */
class User {
    /**
     * Construct a User object.
     * @param properties either the User's ID, or a properties object.
     */
    constructor(properties) {
        if (typeof properties === 'number') {
            this.id = properties;
        }
        else {
            Object.assign(this, properties);
        }
    }
    /**
     * Returns true if the user is an administrator.
     * It uses the user's roles object that can be loaded via Qminder.users.details().
     * The user is an administrator when their role list includes an ADMIN role.
     * @example
     * // Get the details of an user and find out if they are an admin, with ES6 async/await syntax.
     * const user = await Qminder.users.details(1234);
     * const isAdmin = user.isAdmin();
     * console.log(isAdmin);
     * @example
     * // Get the details of an user and find out if they are an admin, in plain JS
     * // note: this asynchronously loads the user data
     * Qminder.users.details(1234).then(function(user) {
     *   const isAdmin = user.isAdmin();
     *   console.log(isAdmin);
     * });
     * @returns {boolean} true if the user is an administrator, false if they are not.
     * @throws Error if the user's roles are not loaded.
     */
    isAdmin() {
        if (!this.roles) {
            throw new Error('User roles are not available. Please load the User via Qminder.users.details');
        }
        const adminRole = this.roles.find(role => role && role.type === 'ADMIN');
        return adminRole !== undefined;
    }
    /**
     * Returns true if the user is an Owner.
     * It uses the user's roles object that can be loaded via Qminder.users.details().
     * The user is an owner when their role list includes an OWNER role.
     * An Owner role can do everything an Admin can, as well as manage billing.
     * @example
     * // Get the details of an user and find out if they are an owner, with ES6 async/await syntax.
     * const user = await Qminder.users.details(1234);
     * const isOwner = user.isOwner();
     * console.log(isOwner);
     * @example
     * // Get the details of an user and find out if they are an owner, in plain JS
     * // note: this asynchronously loads the user data
     * Qminder.users.details(1234).then(function(user) {
     *   const isOwner = user.isOwner();
     *   console.log(isOwner);
     * });
     * @returns {boolean} true if the user is an owner, false if they are not.
     * @throws Error if the user's roles are not loaded.
     */
    isOwner() {
        if (!this.roles) {
            throw new Error('User roles are not available. Please load the User via Qminder.users.details');
        }
        const ownerRole = this.roles.find(role => role && role.type === 'OWNER');
        return ownerRole !== undefined;
    }
    /**
     * Returns true if the user is a manager of the given location.
     * Looks at the user's roles which can be loaded via Qminder.users.details().
     * @example
     * // Get the details user 1234 and find out if they are an admin of Location ID 1114, using ES6
     * // async/await syntax
     * const user = await Qminder.users.details(1234);
     * const isManagerOfLocation = user.isManager(1114);
     * @param location  the location to check, for example 6901
     * @returns {boolean} true if the user is the manager of the location given
     * @throws
     */
    isManager(location) {
        if (!this.roles) {
            throw new Error('User roles are not available. Please load the User via Qminder.users.details');
        }
        let locationId;
        if (typeof location === 'number') {
            locationId = location;
        }
        else {
            locationId = location.id;
        }
        if (typeof locationId !== 'number') {
            throw new Error('Invalid first argument. Please pass a number or a Qminder Location object.');
        }
        const managerRole = this.roles.find(role => role && role.type === 'MANAGER' && role.location === location);
        return managerRole !== undefined;
    }
}
exports.default = User;

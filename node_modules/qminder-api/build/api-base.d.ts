declare type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'OPTIONS' | 'HEAD' | 'DELETE' | 'CONNECT';
interface GraphqlQueryVariables {
    [key: string]: any;
}
export interface GraphqlQuery {
    query: string;
    variables?: GraphqlQueryVariables;
}
interface GraphqlError {
    message: string;
    errorType: string;
    validationErrorType?: string;
    queryPath: string[];
    path?: any;
    extensions?: any;
    locations: {
        line: number;
        column: number;
        sourceName: string;
    }[];
}
/**
 * The shape of the JSON response from the GraphQL API.
 */
export interface GraphqlResponse {
    /** If all went well, 200. The response may still have errors. */
    statusCode: number;
    /** An array that contains any GraphQL errors. */
    errors: GraphqlError[];
    /** If the data was loaded without any errors, contains the requested object. */
    data?: object;
}
export interface GraphqlBatchResponse {
    statusCode: number;
    errors: GraphqlError[];
    data: {
        errors: GraphqlError[];
        data?: object;
    }[];
}
/**
 * Base functionality of the API, such as HTTP requests with the API key.
 *
 * Includes two function definitions for requesting the HTTP API and the GraphQL API, used
 * internally by other methods.
 *
 * @hidden
 */
declare class ApiBase {
    /**
     * Stores the Qminder API key.
     * @private
     */
    apiKey: string;
    /**
     * Keeps track of the API server's name.
     * @private
     */
    apiServer: string;
    /** The fetch() function to use for API calls.
     * @private */
    fetch: Function;
    /**
     * Constructs a new ApiBase instance.
     * @constructor
     */
    constructor();
    /**
     * Set the Qminder API key used for all requests.
     * After setting the API key, you can use the library to make API calls.
     */
    setKey(key: string): void;
    /**
     * Set the domain name of the Qminder API server.
     * @param  server the server's domain name, eg 'api.qminder.com'
     * @hidden
     */
    setServer(server: string): void;
    /**
     * Send a HTTP request to the Qminder API at the given URL.
     * @param url  the URL part to append to the API server, for example "tickets/create"
     * @param data  the the request data, as a File or JS object (serialized to formdata)
     * @param method  the HTTP method to use, defaults to GET. POST and DELETE are used too.
     * @param idempotencyKey  optional: the idempotency key for this request
     * @returns  returns a promise that resolves to the API call's JSON response as a plain object.
     */
    request(url: string, data?: object | File | string, method?: HTTPMethod, idempotencyKey?: string | number): Promise<object>;
    /**
     * Sends list of GraphQL queries to the Qminder API.
     *
     * Sends the given query to the Qminder API, returning a Promise that resolves to the site's HTTP
     * response.
     * @param queries required: list of GraphQL queries, for example "{ me { email } }", or
     * "query X($id: ID!) { location($id) { name } }"
     * @returns a Promise that resolves to the entire response ({ statusCode, data?, errors? ... })
     * @throws when the API key is missing or invalid
     */
    queryGraph(queries: GraphqlQuery[]): Promise<GraphqlBatchResponse>;
}
declare const _default: ApiBase;
export default _default;

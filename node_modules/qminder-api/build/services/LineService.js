"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Line_1 = require("../model/Line");
const Location_1 = require("../model/Location");
const api_base_1 = require("../api-base");
/**
 * The LineService allows you to access data about Lines in Qminder.
 *
 * For example, list all Lines of your Location:
 *
 * ```javascript
 * import * as Qminder from 'qminder-api';
 * Qminder.setKey('API_KEY_GOES_HERE');
 *
 * const locationId = 12345;
 * const lines = await Qminder.lines.list(locationId);
 *
 * console.log(lines);
 * ```
 */
class LineService {
    /**
     * Fetch the location's line list.
     * The lines will have the line ID, name, and color filled in.
     *
     * Calls the following HTTP API: `GET /locations/<ID>/lines`
     *
     * For example:
     *
     * ```javascript
     * const lines = await Qminder.lines.list(159);
     * ```
     * @param location the Location or its ID
     * @returns a promise that resolves to a list of lines, or rejects if something went wrong.
     */
    static list(location) {
        let locationId = location instanceof Location_1.default ? location.id : location;
        if (!locationId || typeof locationId !== 'number') {
            throw new Error('Location ID invalid or missing.');
        }
        return api_base_1.default.request(`locations/${locationId}/lines`)
            .then((response) => response.data.map(line => new Line_1.default(line)));
    }
    /**
     * Fetch detailed information about one line.
     *
     * Calls the following HTTP API: `GET /lines/<ID>`
     *
     * For example:
     *
     * ```javascript
     * const line: Line = await Qminder.lines.details(1425);
     * ```
     * @param line The line to get detailed info about, or the line's ID.
     * @returns a promise that resolves to the Line object, or rejects if something went wrong.
     */
    static details(line) {
        let lineId = line instanceof Line_1.default ? line.id : line;
        if (!lineId || typeof lineId !== 'number') {
            throw new Error('Line ID invalid or missing.');
        }
        return api_base_1.default.request(`lines/${lineId}/`)
            .then((response) => new Line_1.default(response));
    }
    /**
     * Create a new Line and return its details.
     *
     * Calls the following HTTP API: `POST /locations/<ID>/lines`
     *
     * For example:
     *
     * ```javascript
     * const line: Line = await Qminder.lines.create(950, { name: 'Priority Service' });
     * console.log(line.id); // 1425
     * ```
     * @param location the location to add the line under
     * @param line the parameters of the new line - must include the line name
     * @returns a Promise that resolves to a new Line object, created according
     * to the parameters.
     */
    static create(location, line) {
        let locationId = location instanceof Location_1.default ? location.id : location;
        if (!locationId || typeof locationId !== 'number') {
            throw new Error('Location ID invalid or missing.');
        }
        if (!line || typeof line !== 'object') {
            throw new Error('Line invalid or missing.');
        }
        if (!line.name || typeof line.name !== 'string') {
            throw new Error('Cannot create a line without a line name.');
        }
        return api_base_1.default.request(`locations/${locationId}/lines`, line, 'POST');
    }
    /**
     * Update an existing Line name and color.
     *
     * Calls the following HTTP API: `POST /lines/<ID>`
     *
     * For example:
     *
     * ```javascript
     * const line = { "id": 950, "name": "Front Desk", "color": "#ffffff" };
     * await Qminder.lines.update(line);
     * ```
     * @param line the Line to be updated - must include the line id, the desired new name and color.
     * @returns A Promise that resolves when the line was updated, and rejects
     * when something went wrong.
     */
    static update(line) {
        if (!line || typeof line !== 'object') {
            throw new Error('Line is invalid or missing.');
        }
        let lineId = line.id;
        if (!lineId || typeof lineId !== 'number') {
            throw new Error('Line ID is invalid or missing.');
        }
        let lineName = line.name;
        if (!lineName || typeof lineName !== 'string') {
            throw new Error('Cannot update a line without a name.');
        }
        let lineColor = line.color;
        if (!lineColor || typeof lineColor !== 'string') {
            throw new Error('Cannot update a line without a color.');
        }
        let data = { name: lineName, color: lineColor };
        return api_base_1.default.request(`lines/${lineId}`, data, 'POST');
    }
    /**
     * Enable a disabled Line.
     *
     * Calls the following HTTP API: `POST /lines/<ID>/enable`
     *
     * For example:
     *
     * ```javascript
     * await Qminder.lines.enable(1425);
     * ```
     * @param line the Line or the ID of the line to be enabled.
     * @returns A Promise that resolves when the line was enabled, and rejects
     * when something went wrong.
     */
    static enable(line) {
        let lineId = line instanceof Line_1.default ? line.id : line;
        if (!lineId || typeof lineId !== 'number') {
            throw new Error('Line ID invalid or missing.');
        }
        return api_base_1.default.request(`lines/${lineId}/enable`, undefined, 'POST');
    }
    /**
     * Disable a Line.
     *
     * Calls the following HTTP API: `POST /lines/<ID>/disable`
     *
     * For example:
     *
     * ```javascript
     * await Qminder.lines.disable(1425);
     * ```
     * @param line the Line or the ID of the line to be disabled.
     * @returns A Promise that resolves when the line was disabled, and rejects
     * when there active tickets in the line or something went wrong.
     */
    static disable(line) {
        let lineId = line instanceof Line_1.default ? line.id : line;
        if (!lineId || typeof lineId !== 'number') {
            throw new Error('Line ID invalid or missing.');
        }
        return api_base_1.default.request(`lines/${lineId}/disable`, undefined, 'POST');
    }
    /**
     * Archive a Line.
     * This archives the line and removes it from the line list, from iPads and TVs, from the service screen and from
     * statistics. This action cannot be undone.
     *
     * Calls the following HTTP API: `POST /lines/<ID>/archive`
     *
     * For example:
     *
     * ```javascript
     * await Qminder.lines.archive(1425);
     * ```
     * @param line  the Line or the line's ID to archive
     * @returns A Promise that resolves when the line was archived, and rejects
     * when something went wrong.
     */
    static archive(line) {
        let lineId = line instanceof Line_1.default ? line.id : line;
        if (!lineId || typeof lineId !== 'number') {
            throw new Error('Line ID invalid or missing.');
        }
        return api_base_1.default.request(`lines/${lineId}/archive`, undefined, 'POST');
    }
}
exports.default = LineService;
;

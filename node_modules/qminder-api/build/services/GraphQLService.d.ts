import { GraphqlResponse } from '../api-base';
import { Observable } from 'rxjs';
export declare enum ConnectionStatus {
    DISCONNECTED = "DISCONNECTED",
    CONNECTING = "CONNECTING",
    INITIALIZING = "INITIALIZING",
    CONNECTED = "CONNECTED"
}
/**
 * A service that lets the user query Qminder API via GraphQL statements.
 * Queries and subscriptions are supported. There is no support for mutations.
 *
 * Note: the GraphQL API is accessible via `Qminder.graphql`. You should use that, instead of
 * trying to import GraphQLService.
 */
export declare class GraphQLService {
    private apiKey;
    private apiServer;
    private socket;
    private connectionStatus;
    private connectionSubject;
    private connection$;
    private nextSubscriptionId;
    private subscriptions;
    private subscriptionObserverMap;
    /** A timeout object after which to retry connecting to Qminder API. */
    private retryTimeout;
    /** Counts the amount of times the event emitter retried connecting. This is used for
     *  exponential retry falloff. */
    private connectionRetries;
    private batcher;
    constructor();
    /**
     * Query Qminder API with GraphQL.
     *
     * Send a GraphQL query to the Qminder API.
     *
     * When the query contains variables, make sure to fill them all in the second parameter.
     *
     * For example:
     *
     * ```javascript
     * import * as Qminder from 'qminder-api';
     * Qminder.setKey('API_KEY_HERE');
     * // 1. Figure out the selected location ID of the current user, with async/await
     * try {
     *     const response = await Qminder.graphql.query(`{ me { selectedLocation } }`);
     *     console.log(response.me.selectedLocation); // "12345"
     * } catch (error) {
     *     console.log(error);
     * }
     * // 2. Figure out the selected location ID of the current user, with promises
     * Qminder.graphql.query("{ me { selectedLocation } }").then(function(response) {
     *     console.log(response.me.selectedLocation);
     * }, function(error) {
     *     console.log(error);
     * });
     * ```
     *
     * @param query required: the query to send, for example `"{ me { selectedLocation } }"`
     * @param variables optional: additional variables for the query, if variables were used
     * @returns a promise that resolves to the query's results, or rejects if the query failed
     * @throws when the 'query' argument is undefined or an empty string
     */
    query(query: string, variables?: {
        [key: string]: any;
    }): Promise<GraphqlResponse>;
    /**
     * Subscribe to Qminder Events API using GraphQL.
     *
     * For example
     *
     * ```javascript
     * import * as Qminder from 'qminder-api';
     * // 1. Be notified of any created tickets
     * try {
     *     const observable = Qminder.graphql.subscribe("createdTickets(locationId: 123) { id firstName }")
     *
     *     observable.subscribe(data => console.log(data));
     *     // => { createdTickets: { id: '12', firstName: 'Marta' } }
     * } catch (error) {
     *     console.error(error);
     * }
     * ```
     *
     * @param query required: the GraphQL query to send, for example `"createdTickets(locationId: 123) { id firstName }"`
     * @returns an RxJS Observable that will push data as
     * @throws when the 'query' argument is undefined or an empty string
     */
    subscribe(query: string): Observable<object>;
    /**
     * Initialize the EventsService by setting the API key.
     * When the API key is set, the socket can be opened.
     * This method is automatically called when doing Qminder.setKey().
     * @hidden
     */
    setKey(apiKey: string): void;
    /**
     * Get subscription connection observable
     * This returns an observable which fires with the connection status every time it changes.
     * @returns an RxJS obserable that will fire with the connection status every time it changes
     */
    getSubscriptionConnectionObservable(): Observable<'DISCONNECTED' | 'CONNECTING' | 'INITIALIZING' | 'CONNECTED'>;
    /**
     * Set the WebSocket hostname the GraphQL service uses.
     * @hidden
     */
    setServer(apiServer: string): void;
    private stopSubscription;
    private openSocket;
    private sendMessage;
    private sendRawMessage;
    private generateOperationId;
    private setConnectionStatus;
}
declare const _default: GraphQLService;
export default _default;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_base_1 = require("../api-base");
const User_1 = require("../model/User");
const Desk_1 = require("../model/Desk");
const Location_1 = require("../model/Location");
const Line_1 = require("../model/Line");
/**
 * User Service
 */
class UserService {
    /**
     * List all Users in a Location.
     *
     * Returns an Array of all users that have access to a Location. (Owner, Administrators,
     * Location Managers, and Clerks)
     *
     * Calls this HTTP API: `GET /v1/locations/<ID>/users`
     *
     * For example:
     *
     * ```javascript
     * // Fetch the user list for location ID 1234
     * const locationId = 1234;
     * const users = await Qminder.users.list(locationId);
     * ```
     * @param location the Location to find all users for.
     * @returns a Promise that resolves to a list of Users who have access to the location, or
     * rejects when something went wrong.
     */
    static list(location) {
        let locationId = location instanceof Location_1.default ? location.id : location;
        if (!locationId || typeof locationId !== 'number') {
            throw new Error('Location was not valid.');
        }
        return api_base_1.default.request(`locations/${locationId}/users`).then((users) => {
            if (!users.data) {
                throw new Error('User list response was invalid!');
            }
            return users.data.map(each => new User_1.default(each));
        });
    }
    /**
     * Create a new User.
     *
     * To create a new User, the user's email address, first and last name, and at least one
     * UserRole are needed.
     *
     * After creating the User, the person will receive an email asking them to reset their password.
     * When they reset their password, they can access Qminder based on their UserRoles.
     *
     * Calls the HTTP API `POST /v1/users/`
     *
     * @param {User} user an object filled with user details: the first/last name, email and
     * an array of UserRoles are mandatory.
     * @returns {Promise.<User>} a Promise that resolves with the new created User, or rejects if
     * something went wrong.
     * @throws Error when the user's first name, last name, email or roles are missing, or invalid.
     * @see UserRole
     */
    static create(user) {
        const { email, firstName, lastName, roles } = user;
        if (!email || typeof email !== 'string') {
            throw new Error('The user\'s email address is invalid or missing');
        }
        if (!firstName || typeof firstName !== 'string') {
            throw new Error('The user\'s first name is invalid or missing');
        }
        if (!lastName || typeof lastName !== 'string') {
            throw new Error('The user\'s last name is invalid or missing');
        }
        if (!roles) {
            throw new Error('The user\'s roles are missing');
        }
        return api_base_1.default.request(`users/`, {
            email,
            firstName,
            lastName,
            roles: JSON.stringify(roles),
        }, 'POST');
    }
    /**
     * Fetch the user's details.
     *
     * This method allows searching by both user ID and exact email address. When searching by email
     * address, only exact matches are considered.
     *
     * Calls the HTTP API `GET /v1/users/<user>`
     *
     * For example:
     *
     * ```javascript
     * import * as Qminder from 'qminder-api';
     * Qminder.setKey('API_KEY_HERE');
     *
     * // Example 1. Get user details by their email address
     * const user = await Qminder.users.details("john@example.com");
     *
     * // Example 2. Get user details by user ID
     * const user = await Qminder.users.details(14152);
     *
     * // Example 3. Get user details by User object
     * const usersList: Array<User> = Qminder.users.list(1234);
     * let firstUser = usersList[0];
     * firstUser = await Qminder.users.details(firstUser);
     * ```
     * @param user The user, the user's ID, or the user's email address.
     * @returns a Promise that resolves to the user's details, and rejects when
     * something goes wrong.
     * @throws Error when the user argument was invalid (not a string, not a number, or not a User)
     */
    static details(user) {
        let search = null;
        if (user instanceof User_1.default) {
            search = user.id;
        }
        else {
            search = user;
        }
        if (!search) {
            throw new Error('User to search by was invalid. Searching only works by email or user ID or User object.');
        }
        return api_base_1.default.request(`users/${search}`).then((userResponse) => new User_1.default(userResponse));
    }
    /**
     * Removes the user.
     *
     * They will be deleted from the database and will not be able to log in any more.
     *
     * Calls the HTTP API `DELETE /users/<ID>`.
     *
     * @param user the user to delete
     * @returns a Promise that resolves when the user was removed, and rejects when
     * something goes wrong.
     * @throws Error when the argument is invalid (either the user ID is not a number, or the User
     * object did not have an ID).
     */
    static remove(user) {
        let userId = user instanceof User_1.default ? user.id : user;
        if (!userId || typeof userId !== 'number') {
            throw new Error('User ID was invalid');
        }
        return api_base_1.default.request(`users/${userId}/`, undefined, 'DELETE');
    }
    /**
     * Adds a new role to the user.
     * Roles are the method by which Qminder controls who can access which location, at what
     * access level.
     * For example, a User who has administrator privileges can access and modify all location
     * settings, for all locations.
     * However, a User who has clerk privileges can log in and serve visitors, but not modify any
     * location settings nor see service statistics.
     *
     * @param user the User that you want to add roles to
     * @param role the UserRole you want to add for the user.
     * @return a Promise that resolves when the role adding succeeded, and
     * rejects when something went wrong.
     */
    static addRole(user, role) {
        let userId = user instanceof User_1.default ? user.id : user;
        if (!userId || typeof userId !== 'number') {
            throw new Error('User ID is invalid');
        }
        return api_base_1.default.request(`users/${userId}/roles`, role, 'POST');
    }
    /**
     * Set the user's currently selected Desk.
     *
     * Calls the HTTP API `POST /v1/users/<ID>/desk`
     *
     * For example:
     *
     * ```javascript
     * import * as Qminder from 'qminder-api';
     * Qminder.setKey('API_KEY_HERE');
     * // Example. Set the user 14152's desk to Desk 4
     * await Qminder.users.selectDesk(14152, 4);
     * ```
     * @param user The user to modify.
     * @param desk The desired desk.
     * @returns A promise that resolves when setting the desk works, and rejects
     * if it failed.
     */
    static selectDesk(user, desk) {
        let userId = user instanceof User_1.default ? user.id : user;
        if (!userId || typeof userId !== 'number') {
            throw new Error('User ID is invalid');
        }
        let deskId = desk instanceof Desk_1.default ? desk.id : desk;
        if (!deskId || typeof deskId !== 'number') {
            throw new Error('Desk ID is invalid');
        }
        return api_base_1.default.request(`users/${userId}/desk`, { desk: deskId }, 'POST');
    }
    /**
     * Unset the user's currently selected Desk.
     *
     * After this API call, the user will have no desk selected.
     *
     * Calls the HTTP API `DELETE /v1/users/<ID>/desk`.
     * @param user The user to modify
     * @returns A promise that resolves when setting the desk works, and rejects if it failed.
     */
    static removeDesk(user) {
        let userId = user instanceof User_1.default ? user.id : user;
        if (!userId || typeof userId !== 'number') {
            throw new Error('User ID is invalid');
        }
        return api_base_1.default.request(`users/${userId}/desk`, undefined, 'DELETE');
    }
    /**
     * Set the lines selected by current user. All other lines that aren't specified are set to unselected.
     *
     * Calls the HTTP API `POST /v1/users/<ID>/lines`
     *
     * For example:
     *
     * ```javascript
     * import * as Qminder from 'qminder-api';
     * Qminder.setKey('API_KEY_HERE');
     * // Example. Set user 5342's selected lines to 12345, 54321, 98765
     * await Qminder.users.setLines(5342, [12345, 54321, 98765])
     * ```
     * @param user The user whose lines to set.
     * @param lines array of Line, or array of line IDs
     * @returns A promise that resolves when setting the lines works, and rejects
     * if it failed.
     */
    static setLines(user, lines) {
        let userId = user instanceof User_1.default ? user.id : user;
        if (!userId || typeof userId !== 'number') {
            throw new Error('User ID is invalid');
        }
        const isInstanceOfLines = lines.every((value) => value instanceof Line_1.default);
        const isInstanceOfLineIds = lines.every((value) => typeof value === 'number');
        if (isInstanceOfLines) {
            const lineIds = lines.map((line) => line.id);
            return api_base_1.default.request(`users/${userId}/lines`, JSON.stringify(lineIds), 'POST');
        }
        if (isInstanceOfLineIds) {
            return api_base_1.default.request(`users/${userId}/lines`, JSON.stringify(lines), 'POST');
        }
        throw new Error('Lines isn\'t a list of Line or Line IDs');
    }
}
exports.default = UserService;
;

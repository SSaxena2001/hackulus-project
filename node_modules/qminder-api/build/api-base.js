"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fetch = require("isomorphic-fetch");
/**
 * Returns true if an ApiResponse is an Error response, usable as a type guard.
 * @param response an ApiResponse to narrow down
 * @returns true if the ApiResponse is an ErrorResponse, false if it is a SuccessResponse
 * @hidden
 */
function responseIsError(response) {
    return response.statusCode && Math.floor(response.statusCode / 100) !== 2;
}
/**
 * Base functionality of the API, such as HTTP requests with the API key.
 *
 * Includes two function definitions for requesting the HTTP API and the GraphQL API, used
 * internally by other methods.
 *
 * @hidden
 */
class ApiBase {
    /**
     * Constructs a new ApiBase instance.
     * @constructor
     */
    constructor() {
        this.fetch = fetch;
        if (typeof fetch.default === 'function') {
            this.fetch = fetch.default;
        }
        this.setServer('api.qminder.com');
    }
    /**
     * Set the Qminder API key used for all requests.
     * After setting the API key, you can use the library to make API calls.
     */
    setKey(key) {
        this.apiKey = key;
    }
    /**
     * Set the domain name of the Qminder API server.
     * @param  server the server's domain name, eg 'api.qminder.com'
     * @hidden
     */
    setServer(server) {
        this.apiServer = server;
    }
    /**
     * Send a HTTP request to the Qminder API at the given URL.
     * @param url  the URL part to append to the API server, for example "tickets/create"
     * @param data  the the request data, as a File or JS object (serialized to formdata)
     * @param method  the HTTP method to use, defaults to GET. POST and DELETE are used too.
     * @param idempotencyKey  optional: the idempotency key for this request
     * @returns  returns a promise that resolves to the API call's JSON response as a plain object.
     */
    request(url, data, method = 'GET', idempotencyKey) {
        if (!this.apiKey) {
            throw new Error('Please set the API key before making any requests.');
        }
        const init = {
            method: method,
            mode: 'cors',
            headers: {
                'X-Qminder-REST-API-Key': this.apiKey
            },
        };
        if (data) {
            init.method = 'POST';
            if (typeof File !== 'undefined' && data instanceof File) {
                init.body = data;
                init.headers['Content-Type'] = data.type;
            }
            else if (typeof data === 'object') {
                init.body = new URLSearchParams(data).toString();
                init.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
            else if (typeof data === 'string') {
                init.body = data;
                init.headers['Content-Type'] = 'application/json';
            }
            else {
                throw new Error('Cannot determine Content-Type of data');
            }
        }
        if (idempotencyKey) {
            init.headers['Idempotency-Key'] = `${idempotencyKey}`;
        }
        return this.fetch(`https://${this.apiServer}/v1/${url}`, init)
            .then((response) => response.json())
            .then((responseJson) => {
            if (responseIsError(responseJson)) {
                throw new Error(responseJson.developerMessage || responseJson.message);
            }
            return responseJson;
        });
    }
    /**
     * Sends list of GraphQL queries to the Qminder API.
     *
     * Sends the given query to the Qminder API, returning a Promise that resolves to the site's HTTP
     * response.
     * @param queries required: list of GraphQL queries, for example "{ me { email } }", or
     * "query X($id: ID!) { location($id) { name } }"
     * @returns a Promise that resolves to the entire response ({ statusCode, data?, errors? ... })
     * @throws when the API key is missing or invalid
     */
    queryGraph(queries) {
        if (!this.apiKey) {
            throw new Error('Please set the API key before making any requests.');
        }
        const init = {
            method: 'POST',
            headers: {
                'X-Qminder-REST-API-Key': this.apiKey,
            },
            mode: 'cors',
            body: JSON.stringify(queries),
        };
        return (this.fetch(`https://${this.apiServer}/graphql`, init)
            .then((response) => response.json())
            .then((responseJson) => {
            if (responseJson.errorMessage) {
                throw new Error(responseJson.errorMessage);
            }
            return responseJson;
        }));
    }
}
exports.default = new ApiBase();
